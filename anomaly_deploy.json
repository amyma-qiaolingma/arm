{
    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "vmName": {
            "defaultValue": "simpleLinuxVM",
            "type": "String",
            "metadata": {
                "description": "The name of you Virtual Machine."
            }
        },
        "adminUsername": {
            "type": "String",
            "metadata": {
                "description": "Username for the Virtual Machine."
            }
        },
        "authenticationType": {
            "defaultValue": "password",
            "allowedValues": [
                "sshPublicKey",
                "password"
            ],
            "type": "String",
            "metadata": {
                "description": "Type of authentication to use on the Virtual Machine. SSH key is recommended."
            }
        },
        "adminPasswordOrKey": {
            "type": "SecureString",
            "metadata": {
                "description": "SSH Key or password for the Virtual Machine. SSH key is recommended."
            }
        },
        "dnsLabelPrefix": {
            "defaultValue": "[toLower(format('simplelinuxvm-{0}', uniqueString(resourceGroup().id)))]",
            "type": "String",
            "metadata": {
                "description": "Unique DNS Name for the Public IP used to access the Virtual Machine."
            }
        },
        "ubuntuOSVersion": {
            "defaultValue": "18.04-LTS",
            "allowedValues": [
                "12.04.5-LTS",
                "14.04.5-LTS",
                "16.04.0-LTS",
                "18.04-LTS"
            ],
            "type": "String",
            "metadata": {
                "description": "The Ubuntu version for the VM. This will pick a fully patched image of this given Ubuntu version."
            }
        },
        "vmSize": {
            "defaultValue": "Standard_B2s",
            "type": "String",
            "metadata": {
                "description": "The size of the VM"
            }
        },
        "virtualNetworkName": {
            "defaultValue": "vNet",
            "type": "String",
            "metadata": {
                "description": "Name of the VNET"
            }
        },
        "subnetName": {
            "defaultValue": "Subnet",
            "type": "String",
            "metadata": {
                "description": "Name of the subnet in the virtual network"
            }
        },
        "networkSecurityGroupName": {
            "defaultValue": "SecGroupNet",
            "type": "String",
            "metadata": {
                "description": "Name of the Network Security Group"
            }
        },
        "existingStorageAcctResourceId": {
            "type": "String",
            "metadata": {
                "description": "Name of the exiting Storage Account to archieve captures"
            }
        },
        "eventhubSku": {
            "defaultValue": "Standard",
            "allowedValues": [
                "Basic",
                "Standard"
            ],
            "type": "String",
            "metadata": {
                "description": "The messaging tier for service Bus namespace"
            }
        },
        "isAutoInflateEnabled": {
            "defaultValue": "True",
            "allowedValues": [
                "True",
                "False"
            ],
            "type": "String",
            "metadata": {
                "description": "Enable or disable AutoInflate"
            }
        },
        "maximumThroughputUnits": {
            "defaultValue": 10,
            "minValue": 0,
            "maxValue": 20,
            "type": "Int",
            "metadata": {
                "description": "Upper limit of throughput units when AutoInflate is enabled, vaule should be within 0 to 20 throughput units."
            }
        },
        "messageRetentionInDays": {
            "defaultValue": 1,
            "minValue": 1,
            "maxValue": 7,
            "type": "Int",
            "metadata": {
                "description": "How long to retain the data in Event Hub"
            }
        },
        "partitionCount": {
            "defaultValue": 4,
            "minValue": 2,
            "maxValue": 32,
            "type": "Int",
            "metadata": {
                "description": "Number of partitions chosen"
            }
        },
        "captureEnabled": {
            "defaultValue": true,
            "type": "Bool",
            "metadata": {
                "description": "Enable or disable the Capture feature for your Event Hub"
            }
        },
        "captureEncodingFormat": {
            "defaultValue": "Avro",
            "allowedValues": [
                "Avro"
            ],
            "type": "String",
            "metadata": {
                "description": "The encoding format Eventhub capture serializes the EventData when archiving to your storage"
            }
        },
        "captureTime": {
            "defaultValue": 300,
            "minValue": 60,
            "maxValue": 900,
            "type": "Int",
            "metadata": {
                "description": "the time window in seconds for the archival"
            }
        },
        "captureSize": {
            "defaultValue": 314572800,
            "minValue": 10485760,
            "maxValue": 524288000,
            "type": "Int",
            "metadata": {
                "description": "the size window in bytes for evetn hub capture"
            }
        },
        "blobContainerName": {
            "type": "String",
            "metadata": {
                "description": "Your existing storage container that you want the blobs archived in"
            }
        },
        "captureNameFormat": {
            "defaultValue": "{Namespace}/{EventHub}/{PartitionId}/{Year}/{Month}/{Day}/{Hour}/{Minute}/{Second}",
            "type": "String",
            "metadata": {
                "description": "A Capture Name Format must contain {Namespace}, {EventHub}, {PartitionId}, {Year}, {Month}, {Day}, {Hour}, {Minute} and {Second} fields. These can be arranged in any order with or without delimeters. E.g.  Prod_{EventHub}/{Namespace}\\{PartitionId}_{Year}_{Month}/{Day}/{Hour}/{Minute}/{Second}"
            }
        },
        "location": {
            "defaultValue": "[resourceGroup().location]",
            "type": "String",
            "metadata": {
                "description": "Location for all resources"
            }
        },
        "clusterName": {
            "defaultValue": "[format('kusto{0}', uniqueString(resourceGroup().id))]",
            "type": "String",
            "metadata": {
                "description": "Name of the cluster"
            }
        },
        "skuName": {
            "defaultValue": "Standard_D12_v2",
            "type": "String",
            "metadata": {
                "description": "Name of the sku"
            }
        },
        "skuCapacity": {
            "defaultValue": 2,
            "minValue": 2,
            "maxValue": 1000,
            "type": "Int",
            "metadata": {
                "description": "# of nodes"
            }
        },
        "databaseName": {
            "defaultValue": "kustodb",
            "type": "String",
            "metadata": {
                "description": "Name of the database"
            }
        },
        "eventHubNamespaceName": {
            "defaultValue": "[format('eventHub{0}', uniqueString(resourceGroup().id))]",
            "type": "String",
            "metadata": {
                "description": "Name of Event Hub's namespace"
            }
        },
        "eventHubName": {
            "defaultValue": "kustoHub",
            "type": "String",
            "metadata": {
                "description": "Name of Event Hub"
            }
        },
        "uniqueIdentifierName": {
            "type": "String",
            "metadata": {
                "description": "Name of the Unqiue Identifier for Resources"
            }
        },
        "adxDbName": {
            "defaultValue": "mcclogs",
            "type": "String",
            "metadata": {
                "description": "Name of the ADX Database"
            }
        },
        "identityName": {
            "defaultValue": "deploymentScriptIdentity",
            "type": "String",
            "metadata": {
                "description": "Specifies the name of the user-assigned managed identity."
            }
        },
        "storageMode": {
            "defaultValue": "Rapid Prototyping",
            "allowedValues": [
                "Rapid Prototyping",
                "Production Capable - Data Translation"
            ],
            "type": "String"
        }
    },
    "variables": {
        "publicIPAddressName": "[format('{0}PublicIP', parameters('vmName'))]",
        "networkInterfaceName": "[format('{0}NetInt', parameters('vmName'))]",
        "osDiskType": "StandardSSD_LRS",
        "subnetAddressPrefix": "10.1.0.0/24",
        "addressPrefix": "10.1.0.0/16",
        "linuxConfiguration": {
            "disablePasswordAuthentication": true,
            "ssh": {
                "publicKeys": [
                    {
                        "path": "[format('/home/{0}/.ssh/authorized_keys', parameters('adminUsername'))]",
                        "keyData": "[parameters('adminPasswordOrKey')]"
                    }
                ]
            }
        },
        "defaultSASKeyName": "RootManageSharedAccessKey",
        "authRuleResourceId": "[resourceId('Microsoft.EventHub/namespaces/authorizationRules', parameters('eventHubNamespaceName'), variables('defaultSASKeyName'))]",
        "dataReceiverId": "a638d3c7-ab3a-418d-83e6-5f17a39d4fde",
        "fullDataReceiverId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', variables('dataReceiverId'))]",
        "eventHubRoleAssignmentName": "[format('{0}{1}{2}{3}', resourceGroup().id, parameters('clusterName'), variables('dataReceiverId'), parameters('eventHubName'))]",
        "roleAssignmentName": "[format('{0}', guid(variables('eventHubRoleAssignmentName'), parameters('eventHubName'), variables('dataReceiverId'), parameters('clusterName')))]",
        "a40observility_guid": "pid-a2a65bc2-351a-4f60-9511-1de1889f3b69",
        "adls_raw": "[concat(parameters('uniqueIdentifierName'),'adlsraw')]",
        "adls_silver": "[concat(parameters('uniqueIdentifierName'),'adlssilver')]",
        "adls_gold": "[concat(parameters('uniqueIdentifierName'),'adlsgold')]",
        "ehns_name": "[concat(parameters('uniqueIdentifierName'),'-ehns')]",
        "adxClusterName": "[concat(parameters('uniqueIdentifierName'),'observeradx')]",
        "bootstrapRoleAssignmentId": "[guid(concat(resourceGroup().id, 'contributor'))]",
        "contributorRoleDefinitionId": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Authorization/roleDefinitions/', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]"
    },
    "functions": [],
    "resources": [
        {
            "type": "Microsoft.Network/networkInterfaces",
            "apiVersion": "2020-06-01",
            "name": "[variables('networkInterfaceName')]",
            "location": "[parameters('location')]",
            "dependsOn": [
                "[resourceId('Microsoft.Network/networkSecurityGroups', parameters('networkSecurityGroupName'))]",
                "[resourceId('Microsoft.Network/publicIPAddresses', variables('publicIPAddressName'))]",
                "[resourceId('Microsoft.Network/virtualNetworks/subnets', parameters('virtualNetworkName'), parameters('subnetName'))]"
            ],
            "properties": {
                "ipConfigurations": [
                    {
                        "name": "ipconfig1",
                        "properties": {
                            "subnet": {
                                "id": "[resourceId('Microsoft.Network/virtualNetworks/subnets', parameters('virtualNetworkName'), parameters('subnetName'))]"
                            },
                            "privateIPAllocationMethod": "Dynamic",
                            "publicIPAddress": {
                                "id": "[resourceId('Microsoft.Network/publicIPAddresses', variables('publicIPAddressName'))]"
                            }
                        }
                    }
                ],
                "networkSecurityGroup": {
                    "id": "[resourceId('Microsoft.Network/networkSecurityGroups', parameters('networkSecurityGroupName'))]"
                }
            }
        },
        {
            "type": "Microsoft.Network/networkSecurityGroups",
            "apiVersion": "2020-06-01",
            "name": "[parameters('networkSecurityGroupName')]",
            "location": "[parameters('location')]",
            "properties": {
                "securityRules": [
                    {
                        "name": "SSH",
                        "properties": {
                            "priority": 1000,
                            "protocol": "Tcp",
                            "access": "Allow",
                            "direction": "Inbound",
                            "sourceAddressPrefix": "*",
                            "sourcePortRange": "*",
                            "destinationAddressPrefix": "*",
                            "destinationPortRange": "22"
                        }
                    }
                ]
            }
        },
        {
            "type": "Microsoft.Network/virtualNetworks",
            "apiVersion": "2020-06-01",
            "name": "[parameters('virtualNetworkName')]",
            "location": "[parameters('location')]",
            "properties": {
                "addressSpace": {
                    "addressPrefixes": [
                        "[variables('addressPrefix')]"
                    ]
                }
            }
        },
        {
            "type": "Microsoft.Network/virtualNetworks/subnets",
            "apiVersion": "2020-06-01",
            "name": "[format('{0}/{1}', parameters('virtualNetworkName'), parameters('subnetName'))]",
            "dependsOn": [
                "[resourceId('Microsoft.Network/virtualNetworks', parameters('virtualNetworkName'))]"
            ],
            "properties": {
                "addressPrefix": "[variables('subnetAddressPrefix')]",
                "privateEndpointNetworkPolicies": "Enabled",
                "privateLinkServiceNetworkPolicies": "Enabled"
            }
        },
        {
            "type": "Microsoft.Network/publicIPAddresses",
            "apiVersion": "2020-06-01",
            "name": "[variables('publicIPAddressName')]",
            "location": "[parameters('location')]",
            "sku": {
                "name": "Basic"
            },
            "properties": {
                "publicIPAllocationMethod": "Dynamic",
                "publicIPAddressVersion": "IPv4",
                "dnsSettings": {
                    "domainNameLabel": "[parameters('dnsLabelPrefix')]"
                },
                "idleTimeoutInMinutes": 4
            }
        },
        {
            "type": "Microsoft.Compute/virtualMachines",
            "apiVersion": "2020-06-01",
            "name": "[parameters('vmName')]",
            "location": "[parameters('location')]",
            "dependsOn": [
                "[resourceId('Microsoft.Network/networkInterfaces', variables('networkInterfaceName'))]"
            ],
            "properties": {
                "hardwareProfile": {
                    "vmSize": "[parameters('vmSize')]"
                },
                "storageProfile": {
                    "osDisk": {
                        "createOption": "FromImage",
                        "managedDisk": {
                            "storageAccountType": "[variables('osDiskType')]"
                        }
                    },
                    "imageReference": {
                        "publisher": "Canonical",
                        "offer": "UbuntuServer",
                        "sku": "[parameters('ubuntuOSVersion')]",
                        "version": "latest"
                    }
                },
                "networkProfile": {
                    "networkInterfaces": [
                        {
                            "id": "[resourceId('Microsoft.Network/networkInterfaces', variables('networkInterfaceName'))]"
                        }
                    ]
                },
                "osProfile": {
                    "computerName": "[parameters('vmName')]",
                    "adminUsername": "[parameters('adminUsername')]",
                    "adminPassword": "[parameters('adminPasswordOrKey')]",
                    "linuxConfiguration": "[if(equals(parameters('authenticationType'), 'password'), null(), variables('linuxConfiguration'))]"
                }
            }
        },
        {
            "type": "Microsoft.EventHub/Namespaces",
            "apiVersion": "2018-01-01-preview",
            "name": "[parameters('eventHubNamespaceName')]",
            "location": "[parameters('location')]",
            "tags": {
                "tag1": "value1",
                "tag2": "value2"
            },
            "sku": {
                "name": "[parameters('eventhubSku')]",
                "tier": "[parameters('eventhubSku')]",
                "capacity": "[parameters('skuCapacity')]"
            },
            "properties": {
                "isAutoInflateEnabled": "[parameters('isAutoInflateEnabled')]",
                "maximumThroughputUnits": "[parameters('maximumThroughputUnits')]"
            },
            "resources": [
                {
                    "type": "eventhubs",
                    "apiVersion": "2017-04-01",
                    "name": "[parameters('eventHubName')]",
                    "dependsOn": [
                        "[resourceId('Microsoft.EventHub/namespaces/', parameters('eventHubNamespaceName'))]"
                    ],
                    "properties": {
                        "messageRetentionInDays": "[parameters('messageRetentionInDays')]",
                        "partitionCount": "[parameters('partitionCount')]",
                        "captureDescription": {
                            "enabled": "[parameters('captureEnabled')]",
                            "skipEmptyArchives": false,
                            "encoding": "[parameters('captureEncodingFormat')]",
                            "intervalInSeconds": "[parameters('captureTime')]",
                            "sizeLimitInBytes": "[parameters('captureSize')]",
                            "destination": {
                                "name": "EventHubArchive.AzureBlockBlob",
                                "properties": {
                                    "storageAccountResourceId": "[parameters('existingStorageAcctResourceId')]",
                                    "blobContainer": "[parameters('blobContainerName')]",
                                    "archiveNameFormat": "[parameters('captureNameFormat')]"
                                }
                            }
                        }
                    }
                }
            ]
        },
        {
            "type": "Microsoft.EventHub/namespaces/eventhubs/consumergroups",
            "apiVersion": "2021-11-01",
            "name": "[format('{0}/{1}/{2}', parameters('eventHubNamespaceName'), parameters('eventHubName'), 'kustoConsumerGroup')]",
            "dependsOn": [
                "[resourceId('Microsoft.EventHub/namespaces/eventhubs', parameters('eventHubNamespaceName'), parameters('eventHubName'))]",
                "[resourceId('Microsoft.EventHub/namespaces', parameters('eventHubNamespaceName'))]"
            ],
            "properties": {}
        },
        {
            "type": "Microsoft.Kusto/clusters/databases/scripts",
            "apiVersion": "2022-02-01",
            "name": "[format('{0}/{1}/{2}', parameters('clusterName'), parameters('databaseName'), 'db-script')]",
            "dependsOn": [
                "[resourceId('Microsoft.Kusto/clusters', parameters('clusterName'))]",
                "[resourceId('Microsoft.Kusto/clusters/databases', parameters('clusterName'), parameters('databaseName'))]"
            ],
            "properties": {
                "scriptContent": "//  Create a landing table for Event Hub's events\r\n.create-merge table RawEvents(document:dynamic)\r\n\r\n//  Create mapping from JSON ingestion to landing table\r\n.create-or-alter table RawEvents ingestion json mapping 'DirectJson' '[{\"column\":\"document\",\"path\":\"$\",\"datatype\":\"dynamic\"}]'\r\n\r\n//  We modify the ingestion batching policy to make it easy to see records coming ingestion\r\n//  THIS CONFIGURATION SHOULDN'T BE USED IN PRODUCTION:  MaximumBatchingTimeSpan SHOULD BE AT LEAST 1 MINUTE\r\n.alter table RawEvents policy ingestionbatching \"{'MaximumBatchingTimeSpan': '0:0:10', 'MaximumNumberOfItems': 10000}\"",
                "continueOnErrors": false
            }
        },
        {
            "type": "Microsoft.Kusto/clusters/databases/dataConnections",
            "apiVersion": "2022-02-01",
            "name": "[format('{0}/{1}/{2}', parameters('clusterName'), parameters('databaseName'), 'eventConnection')]",
            "location": "[parameters('location')]",
            "dependsOn": [
                "[resourceId('Microsoft.Kusto/clusters', parameters('clusterName'))]",
                "[extensionResourceId(resourceId('Microsoft.EventHub/namespaces/eventhubs', parameters('eventHubNamespaceName'), parameters('eventHubName')), 'Microsoft.Authorization/roleAssignments', variables('roleAssignmentName'))]",
                "[resourceId('Microsoft.EventHub/namespaces/eventhubs', parameters('eventHubNamespaceName'), parameters('eventHubName'))]",
                "[resourceId('Microsoft.EventHub/namespaces/eventhubs/consumergroups', parameters('eventHubNamespaceName'), parameters('eventHubName'), 'kustoConsumerGroup')]",
                "[resourceId('Microsoft.Kusto/clusters/databases', parameters('clusterName'), parameters('databaseName'))]",
                "[resourceId('Microsoft.Kusto/clusters/databases/scripts', parameters('clusterName'), parameters('databaseName'), 'db-script')]"
            ],
            "kind": "EventHub",
            "properties": {
                "compression": "None",
                "consumerGroup": "kustoConsumerGroup",
                "dataFormat": "MULTIJSON",
                "eventHubResourceId": "[resourceId('Microsoft.EventHub/namespaces/eventhubs', parameters('eventHubNamespaceName'), parameters('eventHubName'))]",
                "eventSystemProperties": [
                    "x-opt-enqueued-time"
                ],
                "managedIdentityResourceId": "[resourceId('Microsoft.Kusto/clusters', parameters('clusterName'))]",
                "mappingRuleName": "DirectJson",
                "tableName": "RawEvents"
            }
        },
        {
            "type": "Microsoft.Kusto/clusters/databases",
            "apiVersion": "2022-02-01",
            "name": "[format('{0}/{1}', parameters('clusterName'), parameters('databaseName'))]",
            "location": "[parameters('location')]",
            "dependsOn": [
                "[resourceId('Microsoft.Kusto/clusters', parameters('clusterName'))]"
            ],
            "kind": "ReadWrite"
        },
        {
            "type": "Microsoft.Kusto/clusters",
            "apiVersion": "2022-02-01",
            "name": "[parameters('clusterName')]",
            "location": "[parameters('location')]",
            "sku": {
                "name": "[parameters('skuName')]",
                "tier": "Standard",
                "capacity": "[parameters('skuCapacity')]"
            },
            "identity": {
                "type": "SystemAssigned"
            }
        },
        {
            "type": "Microsoft.Authorization/roleAssignments",
            "apiVersion": "2021-04-01-preview",
            "name": "[variables('roleAssignmentName')]",
            "dependsOn": [
                "[resourceId('Microsoft.Kusto/clusters', parameters('clusterName'))]",
                "[resourceId('Microsoft.EventHub/namespaces/eventhubs', parameters('eventHubNamespaceName'), parameters('eventHubName'))]"
            ],
            "properties": {
                "description": "Give \"Azure Event Hubs Data Receiver\" to the cluster",
                "principalId": "[reference(resourceId('Microsoft.Kusto/clusters', parameters('clusterName')), '2022-02-01', 'full').identity.principalId]",
                "principalType": "ServicePrincipal",
                "roleDefinitionId": "[variables('fullDataReceiverId')]"
            },
            "scope": "[format('Microsoft.EventHub/namespaces/{0}/eventhubs/{1}', parameters('eventHubNamespaceName'), parameters('eventHubName'))]"
        },
        {
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2018-02-01",
            "name": "pid-a2a65bc2-351a-4f60-9511-1de1889f3b69",
            "properties": {
                "mode": "Incremental",
                "template": {
                    "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
                    "contentVersion": "1.0.0.0",
                    "resources": []
                }
            }
        },
        {
            "type": "Microsoft.EventHub/namespaces",
            "apiVersion": "2021-11-01",
            "name": "[variables('ehns_name')]",
            "location": "[resourceGroup().location]",
            "sku": {
                "name": "Standard",
                "tier": "Standard",
                "capacity": 2
            },
            "properties": {
                "disableLocalAuth": false,
                "zoneRedundant": true,
                "isAutoInflateEnabled": false,
                "maximumThroughputUnits": 0,
                "kafkaEnabled": true
            },
            "condition": "[equals(parameters('storageMode'), 'Production Capable - Data Translation')]"
        },
        {
            "type": "Microsoft.EventHub/namespaces/AuthorizationRules",
            "apiVersion": "2021-11-01",
            "name": "[concat(variables('ehns_name'), '/RootManageSharedAccessKey')]",
            "location": "[resourceGroup().location]",
            "dependsOn": [
                "[resourceId('Microsoft.EventHub/namespaces', variables('ehns_name'))]"
            ],
            "properties": {
                "rights": [
                    "Listen",
                    "Manage",
                    "Send"
                ]
            },
            "condition": "[equals(parameters('storageMode'), 'Production Capable - Data Translation')]"
        },
        {
            "type": "Microsoft.EventHub/namespaces/networkRuleSets",
            "apiVersion": "2021-11-01",
            "name": "[concat(variables('ehns_name'), '/default')]",
            "location": "[resourceGroup().location]",
            "dependsOn": [
                "[resourceId('Microsoft.EventHub/namespaces', variables('ehns_name'))]"
            ],
            "properties": {
                "publicNetworkAccess": "Enabled",
                "defaultAction": "Allow",
                "virtualNetworkRules": [],
                "ipRules": []
            },
            "condition": "[equals(parameters('storageMode'), 'Production Capable - Data Translation')]"
        },
        {
            "type": "Microsoft.EventHub/namespaces/eventhubs",
            "apiVersion": "2021-11-01",
            "name": "[concat(variables('ehns_name'), '/eh-logs')]",
            "location": "[resourceGroup().location]",
            "dependsOn": [
                "[resourceId('Microsoft.EventHub/namespaces', variables('ehns_name'))]"
            ],
            "properties": {
                "messageRetentionInDays": 1,
                "partitionCount": 2,
                "status": "Active"
            },
            "condition": "[equals(parameters('storageMode'), 'Production Capable - Data Translation')]"
        },
        {
            "type": "Microsoft.EventHub/namespaces/eventhubs/consumergroups",
            "apiVersion": "2021-11-01",
            "name": "[concat(variables('ehns_name'), '/eh-logs/$Default')]",
            "location": "East US",
            "dependsOn": [
                "[resourceId('Microsoft.EventHub/namespaces/eventhubs', variables('ehns_name'), 'eh-logs')]",
                "[resourceId('Microsoft.EventHub/namespaces', variables('ehns_name'))]"
            ],
            "properties": {},
            "condition": "[equals(parameters('storageMode'), 'Production Capable - Data Translation')]"
        },
        {
            "type": "Microsoft.Storage/storageAccounts",
            "apiVersion": "2021-06-01",
            "name": "[variables('adls_raw')]",
            "location": "[resourceGroup().location]",
            "sku": {
                "name": "Standard_LRS",
                "tier": "Standard"
            },
            "kind": "StorageV2",
            "properties": {
                "defaultToOAuthAuthentication": false,
                "allowCrossTenantReplication": false,
                "minimumTlsVersion": "TLS1_2",
                "allowBlobPublicAccess": true,
                "allowSharedKeyAccess": true,
                "isHnsEnabled": true,
                "networkAcls": {
                    "bypass": "AzureServices",
                    "virtualNetworkRules": [],
                    "ipRules": [],
                    "defaultAction": "Allow"
                },
                "supportsHttpsTrafficOnly": true,
                "encryption": {
                    "requireInfrastructureEncryption": false,
                    "services": {
                        "file": {
                            "keyType": "Account",
                            "enabled": true
                        },
                        "blob": {
                            "keyType": "Account",
                            "enabled": true
                        }
                    },
                    "keySource": "Microsoft.Storage"
                },
                "accessTier": "Hot"
            },
            "condition": "[equals(parameters('storageMode'), 'Production Capable - Data Translation')]"
        },
        {
            "type": "Microsoft.Storage/storageAccounts",
            "apiVersion": "2021-06-01",
            "name": "[variables('adls_silver')]",
            "location": "[resourceGroup().location]",
            "sku": {
                "name": "Standard_LRS",
                "tier": "Standard"
            },
            "kind": "StorageV2",
            "properties": {
                "defaultToOAuthAuthentication": false,
                "allowCrossTenantReplication": false,
                "minimumTlsVersion": "TLS1_2",
                "allowBlobPublicAccess": true,
                "allowSharedKeyAccess": true,
                "isHnsEnabled": true,
                "networkAcls": {
                    "bypass": "AzureServices",
                    "virtualNetworkRules": [],
                    "ipRules": [],
                    "defaultAction": "Allow"
                },
                "supportsHttpsTrafficOnly": true,
                "encryption": {
                    "requireInfrastructureEncryption": false,
                    "services": {
                        "file": {
                            "keyType": "Account",
                            "enabled": true
                        },
                        "blob": {
                            "keyType": "Account",
                            "enabled": true
                        }
                    },
                    "keySource": "Microsoft.Storage"
                },
                "accessTier": "Hot"
            },
            "condition": "[equals(parameters('storageMode'), 'Production Capable - Data Translation')]"
        },
        {
            "type": "Microsoft.Storage/storageAccounts",
            "apiVersion": "2021-06-01",
            "name": "[variables('adls_gold')]",
            "location": "[resourceGroup().location]",
            "sku": {
                "name": "Standard_LRS",
                "tier": "Standard"
            },
            "kind": "StorageV2",
            "properties": {
                "defaultToOAuthAuthentication": false,
                "allowCrossTenantReplication": false,
                "minimumTlsVersion": "TLS1_2",
                "allowBlobPublicAccess": true,
                "allowSharedKeyAccess": true,
                "isHnsEnabled": true,
                "networkAcls": {
                    "bypass": "AzureServices",
                    "virtualNetworkRules": [],
                    "ipRules": [],
                    "defaultAction": "Allow"
                },
                "supportsHttpsTrafficOnly": true,
                "encryption": {
                    "requireInfrastructureEncryption": false,
                    "services": {
                        "file": {
                            "keyType": "Account",
                            "enabled": true
                        },
                        "blob": {
                            "keyType": "Account",
                            "enabled": true
                        }
                    },
                    "keySource": "Microsoft.Storage"
                },
                "accessTier": "Hot"
            }
        },
        {
            "type": "Microsoft.Kusto/clusters",
            "apiVersion": "2020-06-14",
            "name": "[variables('adxClusterName')]",
            "location": "[resourceGroup().location]",
            "sku": {
                "name": "Standard_D13_v2",
                "tier": "Standard",
                "capacity": 3
            },
            "identity": {
                "type": "SystemAssigned"
            },
            "properties": {
                "optimizedAutoscale": {
                    "version": 1,
                    "isEnabled": true,
                    "minimum": 2,
                    "maximum": 10
                }
            }
        },
        {
            "type": "Microsoft.Kusto/clusters/databases",
            "apiVersion": "2020-06-14",
            "name": "[concat(variables('adxClusterName'), '/', parameters('adxDbName'))]",
            "location": "[resourceGroup().location]",
            "dependsOn": [
                "[resourceId('Microsoft.Kusto/clusters', variables('adxClusterName'))]"
            ],
            "properties": {
                "softDeletePeriodInDays": 365,
                "hotCachePeriodInDays": 31
            }
        },
        {
            "type": "Microsoft.ManagedIdentity/userAssignedIdentities",
            "apiVersion": "2018-11-30",
            "name": "[parameters('identityName')]",
            "location": "[resourceGroup().location]"
        },
        {
            "type": "Microsoft.Kusto/Clusters/PrincipalAssignments",
            "apiVersion": "2020-09-18",
            "name": "[concat(variables('adxClusterName'), '/MSIidentity')]",
            "dependsOn": [
                "[resourceId('Microsoft.Kusto/Clusters', variables('adxClusterName'))]",
                "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('identityName'))]"
            ],
            "properties": {
                "principalId": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('identityName')), '2018-11-30').clientId]",
                "principalType": "App",
                "tenantId": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('identityName')), '2018-11-30').tenantId]",
                "role": "AllDatabasesAdmin"
            }
        },
        {
            "type": "Microsoft.Kusto/Clusters/Databases/PrincipalAssignments",
            "apiVersion": "2020-09-18",
            "name": "[concat(variables('adxClusterName'), '/', parameters('adxDbName'), '/MSIidentity')]",
            "dependsOn": [
                "[resourceId('Microsoft.Kusto/Clusters/Databases', variables('adxClusterName'), parameters('adxDbName'))]",
                "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('identityName'))]"
            ],
            "properties": {
                "principalId": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('identityName')), '2018-11-30').clientId]",
                "principalType": "App",
                "tenantId": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('identityName')), '2018-11-30').tenantId]",
                "role": "Admin"
            }
        },
        {
            "type": "Microsoft.Authorization/roleAssignments",
            "apiVersion": "2018-09-01-preview",
            "name": "[variables('bootstrapRoleAssignmentId')]",
            "dependsOn": [
                "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('identityName'))]"
            ],
            "properties": {
                "roleDefinitionId": "[variables('contributorRoleDefinitionId')]",
                "principalId": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('identityName')), '2018-11-30').principalId]",
                "scope": "[resourceGroup().id]",
                "principalType": "ServicePrincipal"
            }
        }
    ],
    "outputs": {
        "adminUsername": {
            "type": "String",
            "value": "[parameters('adminUsername')]"
        },
        "hostname": {
            "type": "String",
            "value": "[reference(resourceId('Microsoft.Network/publicIPAddresses', variables('publicIPAddressName'))).dnsSettings.fqdn]"
        },
        "sshCommand": {
            "type": "String",
            "value": "[format('ssh {0}@{1}', parameters('adminUsername'), reference(resourceId('Microsoft.Network/publicIPAddresses', variables('publicIPAddressName'))).dnsSettings.fqdn)]"
        },
        "authRuleResourceId": {
            "type": "String",
            "value": "[variables('authRuleResourceId')]"
        },
        "adxUrl": {
            "type": "String",
            "value": "[reference(resourceId('Microsoft.Kusto/clusters', variables('adxClusterName')), '2020-06-14', 'Full').properties.uri]"
        },
        "adxIngestionUrl": {
            "type": "String",
            "value": "[reference(resourceId('Microsoft.Kusto/clusters', variables('adxClusterName')), '2020-06-14', 'Full').properties.dataIngestionUri]"
        },
        "eventHubUrl": {
            "condition": "[equals(parameters('storageMode'), 'Production Capable - Data Translation')]",
            "type": "String",
            "value": "[reference(resourceId('Microsoft.EventHub/namespaces', variables('ehns_name')), '2021-11-01', 'Full').properties.serviceBusEndpoint]"
        },
        "storageEndpointRaw": {
            "condition": "[equals(parameters('storageMode'), 'Production Capable - Data Translation')]",
            "type": "Object",
            "value": "[reference(variables('adls_raw')).primaryEndpoints]"
        },
        "storageEndpointSilver": {
            "condition": "[equals(parameters('storageMode'), 'Production Capable - Data Translation')]",
            "type": "Object",
            "value": "[reference(variables('adls_silver')).primaryEndpoints]"
        },
        "storageEndpointGold": {
            "type": "Object",
            "value": "[reference(variables('adls_gold')).primaryEndpoints]"
        }
    }
}
